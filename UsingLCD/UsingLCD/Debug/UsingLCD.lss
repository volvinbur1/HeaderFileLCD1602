
UsingLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000002a4  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fdf  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000822  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000513  00000000  00000000  00001c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000487  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008a5  00000000  00000000  0000264b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  8e:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	5a 98       	cbi	0x0b, 2	; 11
  98:	9b b1       	in	r25, 0x0b	; 11
  9a:	9f 70       	andi	r25, 0x0F	; 15
  9c:	9b b9       	out	0x0b, r25	; 11
  9e:	9b b1       	in	r25, 0x0b	; 11
  a0:	28 2f       	mov	r18, r24
  a2:	20 7f       	andi	r18, 0xF0	; 240
  a4:	92 2b       	or	r25, r18
  a6:	9b b9       	out	0x0b, r25	; 11
  a8:	5b 9a       	sbi	0x0b, 3	; 11
  aa:	e7 e5       	ldi	r30, 0x57	; 87
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_command+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_command+0x1e>
  b4:	00 00       	nop
  b6:	5b 98       	cbi	0x0b, 3	; 11
  b8:	e7 e5       	ldi	r30, 0x57	; 87
  ba:	f2 e0       	ldi	r31, 0x02	; 2
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_command+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_command+0x2c>
  c2:	00 00       	nop
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	9b b9       	out	0x0b, r25	; 11
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	82 95       	swap	r24
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	5b 9a       	sbi	0x0b, 3	; 11
  d6:	87 e5       	ldi	r24, 0x57	; 87
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_command+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_command+0x4a>
  e0:	00 00       	nop
  e2:	5b 98       	cbi	0x0b, 3	; 11
  e4:	e7 e5       	ldi	r30, 0x57	; 87
  e6:	f2 e0       	ldi	r31, 0x02	; 2
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_command+0x52>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_command+0x58>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_Initialization>:
  f2:	8c ef       	ldi	r24, 0xFC	; 252
  f4:	8a b9       	out	0x0a, r24	; 10
  f6:	8f e5       	ldi	r24, 0x5F	; 95
  f8:	9a ee       	ldi	r25, 0xEA	; 234
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Initialization+0x8>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Initialization+0xe>
 100:	00 00       	nop
 102:	83 e3       	ldi	r24, 0x33	; 51
 104:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 108:	82 e3       	ldi	r24, 0x32	; 50
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 10e:	88 e2       	ldi	r24, 0x28	; 40
 110:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 114:	95 ed       	ldi	r25, 0xD5	; 213
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Initialization+0x24>
 11a:	00 00       	nop
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 122:	85 ed       	ldi	r24, 0xD5	; 213
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_Initialization+0x32>
 128:	00 00       	nop
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 130:	95 ed       	ldi	r25, 0xD5	; 213
 132:	9a 95       	dec	r25
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Initialization+0x40>
 136:	00 00       	nop
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Initialization+0x50>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_Initialization+0x56>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <LCD_dataCharacter>:
 14c:	5a 9a       	sbi	0x0b, 2	; 11
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	9b b9       	out	0x0b, r25	; 11
 154:	9b b1       	in	r25, 0x0b	; 11
 156:	28 2f       	mov	r18, r24
 158:	20 7f       	andi	r18, 0xF0	; 240
 15a:	92 2b       	or	r25, r18
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	5b 9a       	sbi	0x0b, 3	; 11
 160:	e7 e5       	ldi	r30, 0x57	; 87
 162:	f2 e0       	ldi	r31, 0x02	; 2
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_dataCharacter+0x18>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_dataCharacter+0x1e>
 16a:	00 00       	nop
 16c:	5b 98       	cbi	0x0b, 3	; 11
 16e:	e7 e5       	ldi	r30, 0x57	; 87
 170:	f2 e0       	ldi	r31, 0x02	; 2
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_dataCharacter+0x26>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_dataCharacter+0x2c>
 178:	00 00       	nop
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	9f 70       	andi	r25, 0x0F	; 15
 17e:	9b b9       	out	0x0b, r25	; 11
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	89 2b       	or	r24, r25
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	5b 9a       	sbi	0x0b, 3	; 11
 18c:	87 e5       	ldi	r24, 0x57	; 87
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_dataCharacter+0x44>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_dataCharacter+0x4a>
 196:	00 00       	nop
 198:	5b 98       	cbi	0x0b, 3	; 11
 19a:	e7 e5       	ldi	r30, 0x57	; 87
 19c:	f2 e0       	ldi	r31, 0x02	; 2
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_dataCharacter+0x52>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_dataCharacter+0x58>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <LCD_dataString>:
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
 1ae:	88 81       	ld	r24, Y
 1b0:	88 23       	and	r24, r24
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <LCD_dataString+0x18>
 1b4:	21 96       	adiw	r28, 0x01	; 1
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_dataCharacter>
 1ba:	89 91       	ld	r24, Y+
 1bc:	81 11       	cpse	r24, r1
 1be:	fb cf       	rjmp	.-10     	; 0x1b6 <LCD_dataString+0xe>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <main>:

//#define RS PD2
//#define EN_pin PD3

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	60 97       	sbiw	r28, 0x10	; 16
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	LCD_Initialization();
 1da:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Initialization>
	//LCD_dataCharacter('t');
	LCD_dataString("All work well");
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_dataString>

	int increments_Amount = 0;
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ea:	4a e0       	ldi	r20, 0x0A	; 10
 1ec:	be 01       	movw	r22, r28
 1ee:	6f 5f       	subi	r22, 0xFF	; 255
 1f0:	7f 4f       	sbci	r23, 0xFF	; 255
 1f2:	c8 01       	movw	r24, r16
 1f4:	0e 94 1b 01 	call	0x236	; 0x236 <__itoa_ncheck>
		LCD_command(0x80);
		_delay_us(40);
	}
	if(row == 2 && colom >= 1 && colom <= 16)
	{
		LCD_command(0xC0);	
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 1fe:	25 ed       	ldi	r18, 0xD5	; 213
 200:	2a 95       	dec	r18
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x3a>
 204:	00 00       	nop
		char showincrementiontimes [16];
		
		itoa(increments_Amount, showincrementiontimes, 10);

		LCD_position(2,1);		
		LCD_dataString("Sure   ");
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_dataString>
		LCD_dataString(showincrementiontimes);
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_dataString>
		LCD_dataString(" times");
 216:	86 e1       	ldi	r24, 0x16	; 22
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_dataString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	93 ed       	ldi	r25, 0xD3	; 211
 222:	20 e3       	ldi	r18, 0x30	; 48
 224:	81 50       	subi	r24, 0x01	; 1
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	20 40       	sbci	r18, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x5e>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x68>
 22e:	00 00       	nop
		
		_delay_ms(1000);
		
		increments_Amount++;
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	da cf       	rjmp	.-76     	; 0x1ea <main+0x24>

00000236 <__itoa_ncheck>:
 236:	bb 27       	eor	r27, r27
 238:	4a 30       	cpi	r20, 0x0A	; 10
 23a:	31 f4       	brne	.+12     	; 0x248 <__itoa_ncheck+0x12>
 23c:	99 23       	and	r25, r25
 23e:	22 f4       	brpl	.+8      	; 0x248 <__itoa_ncheck+0x12>
 240:	bd e2       	ldi	r27, 0x2D	; 45
 242:	90 95       	com	r25
 244:	81 95       	neg	r24
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	0c 94 27 01 	jmp	0x24e	; 0x24e <__utoa_common>

0000024c <__utoa_ncheck>:
 24c:	bb 27       	eor	r27, r27

0000024e <__utoa_common>:
 24e:	fb 01       	movw	r30, r22
 250:	55 27       	eor	r21, r21
 252:	aa 27       	eor	r26, r26
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	aa 1f       	adc	r26, r26
 25a:	a4 17       	cp	r26, r20
 25c:	10 f0       	brcs	.+4      	; 0x262 <__utoa_common+0x14>
 25e:	a4 1b       	sub	r26, r20
 260:	83 95       	inc	r24
 262:	50 51       	subi	r21, 0x10	; 16
 264:	b9 f7       	brne	.-18     	; 0x254 <__utoa_common+0x6>
 266:	a0 5d       	subi	r26, 0xD0	; 208
 268:	aa 33       	cpi	r26, 0x3A	; 58
 26a:	08 f0       	brcs	.+2      	; 0x26e <__utoa_common+0x20>
 26c:	a9 5d       	subi	r26, 0xD9	; 217
 26e:	a1 93       	st	Z+, r26
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	79 f7       	brne	.-34     	; 0x252 <__utoa_common+0x4>
 274:	b1 11       	cpse	r27, r1
 276:	b1 93       	st	Z+, r27
 278:	11 92       	st	Z+, r1
 27a:	cb 01       	movw	r24, r22
 27c:	0c 94 40 01 	jmp	0x280	; 0x280 <strrev>

00000280 <strrev>:
 280:	dc 01       	movw	r26, r24
 282:	fc 01       	movw	r30, r24
 284:	67 2f       	mov	r22, r23
 286:	71 91       	ld	r23, Z+
 288:	77 23       	and	r23, r23
 28a:	e1 f7       	brne	.-8      	; 0x284 <strrev+0x4>
 28c:	32 97       	sbiw	r30, 0x02	; 2
 28e:	04 c0       	rjmp	.+8      	; 0x298 <strrev+0x18>
 290:	7c 91       	ld	r23, X
 292:	6d 93       	st	X+, r22
 294:	70 83       	st	Z, r23
 296:	62 91       	ld	r22, -Z
 298:	ae 17       	cp	r26, r30
 29a:	bf 07       	cpc	r27, r31
 29c:	c8 f3       	brcs	.-14     	; 0x290 <strrev+0x10>
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
